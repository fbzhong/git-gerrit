#!/bin/bash

this=$(basename "$0")

# default settings
explain=false
verbose=true
run=true

# colors
RED="\033[0;31m"
YELLOW="\033[1;33m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"
BOLD="\033[1m"
UNDERLINE="\033[4m"

die() {
    echo -e "${RED}${@}${NO_COLOR}"
    exit 1
}

warn() {
    echo -e "${YELLOW}${@}${NO_COLOR}"
}

good() {
    echo -e "${GREEN}${@}${NO_COLOR}"
}

# Check commands
GIT=$(which git)
if [[ -z "$GIT" ]]; then
    die "git is not installed"
fi

SSH=$(which ssh)
if [[ -z "$SSH" ]]; then
    die "ssh is not installed"
fi

GERRIT_CHERRY_PICK=$(which gerrit-cherry-pick)

if [[ -z "$GERRIT_CHERRY_PICK" ]]; then
    die "gerrit-cherry-pick is not installed"
fi

# creates a new unique output file by using the current process ID
GIT_OUTPUT_FILE="/tmp/git_output$$"

GIT_DIR=$($GIT rev-parse --git-dir 2>/dev/null)

if [[ -z "$GIT_DIR" ]]; then
    die "$this can only be run from a git repository."
fi

CURRENT=$($GIT symbolic-ref -q HEAD || $GIT rev-parse HEAD)
CURRENT=${CURRENT#refs/heads/}

git() {
    if [[ "$verbose" = true ]]; then
        echo -e "+ ${GREEN}git $@${NO_COLOR}"
    fi

    if [[ "$run" = true ]]; then
        $GIT $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
        return ${PIPESTATUS[0]}
    fi
}
gerrit-cherry-pick() {
    if [[ "$verbose" = true ]]; then
        echo -e "+ ${GREEN}gerrit-cherry-pick $@${NO_COLOR}"
    fi

    if [[ "$run" = true ]]; then
        $GERRIT_CHERRY_PICK $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
        return ${PIPESTATUS[0]}
    fi
}
ssh() {
    if [[ "$verbose" = true ]]; then
        echo -e "+ ${GREEN}ssh $@${NO_COLOR}"
    fi

    if [[ "$run" = true ]]; then
        $SSH $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
        return ${PIPESTATUS[0]}
    fi
}

trap _cleanup_git_output EXIT

_cleanup_git_output() {
    rm -f $GIT_OUTPUT_FILE
}

no_changes () {
    # $GIT diff-index --quiet --cached HEAD -- &&
    #     $GIT diff-files --quiet
    $GIT update-index --refresh --unmerged -q >/dev/null
    $GIT diff-index --quiet --cached HEAD -- &&
        $GIT diff-files --quiet
}

is_integer() {
    [[ "$1" = [0-9]* ]] > /dev/null 2>&1
    return $?
}

has_remote_branch() {
    local remote=$1 branch=$2
    $GIT branch -r | grep "$remote/$branch" > /dev/null
    return $?
}

is_review_branch() {
    local branch=$1
    if [[ "${branch:0:1}" = "r" ]]; then
        local change=${branch:1}
        if is_integer $change; then
            return 0
        fi
    fi
    return 1
}

ask_yes_no() {
    if [ "" = "$2" ] ; then
        local msg="$1 [y/n]: "
    else
        local msg="$1 (y/n) [$2]: "
    fi
    while true; do
        read -p "$msg" choice
            case ${choice:-$2} in
                y|Y|yes|Yes|YES)
                    return 0
                    ;;
                n|no|No|NO)
                    return 1
                    ;;
                *)
                    warn "Please choose either y or n"
                    ;;
            esac
    done
}

# gerrit track file.
GERRIT_TRACK="${GIT_DIR}/GERRIT_TRACK"

set_track() {
    local branch="$1" from_branch="$2" remote"$3" track="$4" track_commit="$5"

    remove_track "$branch"

    echo "$branch:$from_branch:$remote:$track:$track_commit" >> $GERRIT_TRACK
}

remove_track() {
    if [ ! -e "$GERRIT_TRACK" ] ; then
        return
    fi
    local branch="${1:-$CURRENT}"
    sed -i '' -e "/$branch:/d" "$GERRIT_TRACK"
}

get_change_number_from_branch() {
    if is_review_branch $CURRENT; then
        CHANGE=${CURRENT:1}
        if [[ $verbose = true ]]; then
            good "Using change number $CHANGE from branch name"
        fi
        return 0
    fi
    return 1
}

patch_count_for_change() {
    local change_id=$1
    local hash=$(($change_id % 100))
    case $hash in
        [0-9]) hash="0$hash" ;;
    esac

    $GIT ls-remote $REMOTE "refs/changes/$hash/$change_id/*" | \
        sed 's/.*\///g' | sort -n | tail -n1
}

getGerritServerAndProject() {
    if [ "" != "${host}" ] ; then
        return
    fi

    local url_line=$($GIT remote show -n origin | grep "Push  URL: " | head -n1)
    local host_and_project=${url_line# *URL: }

    host=''
    project=''
    port=''

    if [[ "$host_and_project" =~ "ssh://" ]]; then
      local host_and_project=${host_and_project#ssh://}
      local host_and_port=${host_and_project%%/*}

      if [[ "$host_and_port" =~ ":" ]]; then
        host=${host_and_port%:*}
        port=${host_and_port#*:}
      else
        host=${host_and_port}
        port=""
      fi
      project=${host_and_project#*/}
    else
      host=${host_and_project%:*}
      project=${host_and_project#*:}
      port=""
    fi

    project=${project%.git}

    port=${port%/*}
}

executeGerritCommand() {
    getGerritServerAndProject
    gerrit_command_result=$($SSH -p $port $host gerrit $@)
}

getBranchInfo() {
    REMOTE=`$GIT config branch.$CURRENT.remote`

    if [[ -z "$REMOTE" ]]; then
        REMOTE=origin
    fi

    TRACK=`$GIT config branch.$CURRENT.merge`

    if [[ -n "$TRACK" ]]; then
        TRACK=${TRACK#refs/heads/}
        IS_TRACKING_REMOTE=y
    fi

    if [[ -e "$GERRIT_TRACK" ]]; then
        local data=($(fgrep "$CURRENT:" "$GERRIT_TRACK" | awk -F: '{print $2" "$3" "$4" "$5}'))
        if [[ -n "${data[0]}" ]] ; then
            FROM_BRANCH=${data[0]}
            REMOTE=${data[1]}
            TRACK=${data[2]}
            TRACK_COMMIT=${data[3]}
        fi
    fi

    if [[ -z "$TRACK" ]]; then
        TRACK=$CURRENT
    fi
    ORIG_TRACK=$TRACK
}

# git gerrit apply 100
applyChange() {
    abort_on_bad_repo_state

    local change=$CHANGE branch=r$CHANGE current="$CURRENT"
    local remote="$REMOTE" track="$TRACK"

    # IS_TRACKING_REMOTE
    if [[ -z "$IS_TRACKING_REMOTE" ]] ; then
        # not tracking remote, let's guess.
        if has_remote_branch $remote $current ; then
            track="$current"
        else
            local msg="Your may forget set upstream branch for branch ${GREEN}$current${RED}."
            local msg="${msg}\nSince the changes ${GREEN}$change${RED} must be applied on proper remote branch."
            local msg="${msg}\nType the following command to set:"
            local msg="${msg}\n${GREEN}git branch --set-upstream $current${RED} [upstream]."
            die $msg
        fi
    fi

    local track_branch="$remote/$track"

    # create a new branch based on the current tracking branch to work in
    $GIT branch -D $branch 2>/dev/null 1>&2
    git checkout -b $branch $track_branch ||
        die "Unable to create a new branch '$branch'"

    # track original branch.
    set_track $branch $current $remote $track "$($GIT rev-parse $track_branch)"

    # apply the change to the new branch
    local patch="$(patch_count_for_change $change)"
    gerrit-cherry-pick $remote $change/$patch ||
        die "Unable to apply ±$change/$patch on top of $track_branch"

    if [[ "$verbose" = true ]]; then
        good "Successfully cherry-picked ±$change so you can begin reviewing it"
    fi
}

# git gerrit reset
resetChange() {
    if [[ "$1" == "-f" ]]; then
        git reset --hard
    else
        abort_on_bad_repo_state
    fi

    local current="$CURRENT" from_branch="$FROM_BRANCH"
    local remote="$REMOTE" track="$TRACK" track_branch="$REMOTE/$TRACK"

    # clean up after gerrit-cherry-pick if it failed
    rm -rf "$GIT_DIR/rebase-gerrit"

    # clean up TRACK file
    remove_track "$current"

    if [[ ${CURRENT:0:1} == "r" ]] && is_integer ${CURRENT:1}; then
        git checkout $from_branch && git branch -D $current ||
            die "Unable to close the review branch $current"
    else
        die "We are not on a review branch ($current)"
    fi
}

updateChange() {
    if ! is_review_branch $CURRENT; then
        warn "$CURRENT is not a review branch"
        printUsage
        exit 2
    fi

    abort_on_bad_repo_state

    CHANGE=${CURRENT:1}
    resetChange
    TRACK="$ORIG_TRACK"
    CURRENT="$FROM_BRANCH"
    applyChange
}

showPatchSetDiff() {
    get_change_number_from_branch ||
        die "Unable to get change number from $CURRENT"

    local current="$CURRENT" from_branch="$FROM_BRANCH"
    local remote="$REMOTE" track="$TRACK" track_branch="$REMOTE/$TRACK"

    local params=($@)
    local params_len=${#params[@]}

    if [ "$params_len" -eq "0" ] ; then
        local params=($params HEAD)
    fi

    local commit=${params[${#params[@]}-1]}

    if [[ $commit = --* ]] ; then
        local commit=HEAD
    else
        unset params[${#params[@]}-1]
    fi

    local args="diff $params $track_branch..$commit"
    if [[ "$verbose" = true ]]; then
        echo -e "+ ${GREEN}git $args${NO_COLOR}"
    fi
    $GIT $args
}

diffPatches() {
    get_change_number_from_branch ||
        die "Unable to get change number from $CURRENT"

    local current="$CURRENT" from_branch="$FROM_BRANCH"
    local remote="$REMOTE" track="$TRACK" track_branch="$REMOTE/$TRACK"

    local change=$CHANGE
    local changeref=refs/remotes/changes/${change:(-2)}/$change

    case $# in
        0)
            local patch2=$(patch_count_for_change $change)
            local patch1=$((patch2 - 1))
            ;;
        1)
            local patch2=$(patch_count_for_change $change)
            local patch1=$1
            ;;
        2)
            local patch1=$1
            local patch2=$2
            ;;
        3)
            local change=$1
            local patch1=$2
            local patch2=$3
            ;;
        *)
            printShortUsage
            die "too many arguments"
            ;;
    esac

    if [[ "$patch1" = "$patch2" ]] || [[ "$patch1" = 0 ]]; then
        die "Only one patchset--nothing to diff!"
    fi

    if [[ "$verbose" = true ]]; then
        good "Diffing patchset $patch1 vs patchset $patch2"
    fi

    local branch1="r$change,$patch1"
    local branch2="r$change,$patch2"

    # create a branch for patch1
    git checkout -b $branch1 $track_branch >/dev/null 2>&1 ||
        die "Unable to create a new branch '$branch1'"
    gerrit-cherry-pick $remote $change/$patch1 >/dev/null 2>&1 ||
        die "Unable to apply ±$branch1 on top of $track_branch"

    # create a branch for patch2
    git checkout -b $branch2 $track_branch >/dev/null 2>&1 ||
        die "Unable to create a new branch '$branch2'"
    gerrit-cherry-pick $remote $change/$patch2 >/dev/null 2>&1 ||
        die "Unable to apply ±$branch2 on top of $track_branch"

    # actually show the diff
    git diff --src-prefix=$branch1: --dst-prefix=$branch2: --color $branch1 $branch2 > $GIT_OUTPUT_FILE
    less -rf $GIT_OUTPUT_FILE
    rm -f $GIT_OUTPUT_FILE

    git checkout "$CURRENT" >/dev/null 2>&1 ||
        die "Unable to switch back to $CURRENT"

    git branch -D $branch1 $branch2 >/dev/null 2>&1 ||
        die "Unable to delete temporary patch branches"
}

reviewChange() {
    if is_integer $CHANGE; then
        local PATCH=$(patch_count_for_change $CHANGE)
    else
        die "You must be on a review branch"
    fi

    getGerritServerAndProject

    local current="$CURRENT" from_branch="$FROM_BRANCH"
    local remote="$REMOTE" track="$TRACK" track_branch="$REMOTE/$TRACK"

    local LOG=$($GIT log --pretty="format:%s" $track_branch..HEAD)
    good "Reviewing '$LOG'..."

    local zero="0"

    read -e -p "Verified (-1..+1) [0] : " VERIFIED
    VERIFIED="${VERIFIED:-$zero}"
    read -e -p "Code review (-2..+2) [0] : " CODE_REVIEW
    CODE_REVIEW="${CODE_REVIEW:-$zero}"

    echo "You may supply a message. Hit return once your are done."
    read -e -p "Message: " MESSAGE

    local CMD="$host -p $port gerrit review"
    CMD="$CMD --verified=$VERIFIED"
    CMD="$CMD --code-review=$CODE_REVIEW"
    CMD="$CMD --project=$project $CHANGE,$PATCH"
    if [[ -n $MESSAGE ]]; then
        CMD="$CMD --message=\"$MESSAGE\""
    fi

    ssh $CMD

    # if ask_yes_no "Reset review branch?" "n"; then
    #     resetChange
    # fi
}

submitChange() {
    if is_integer $CHANGE; then
        local PATCH=$(patch_count_for_change $CHANGE)
    else
        die "You must be on a review branch"
    fi

    getGerritServerAndProject

    local current="$CURRENT" from_branch="$FROM_BRANCH"
    local remote="$REMOTE" track="$TRACK" track_branch="$REMOTE/$TRACK"

    local LOG=$($GIT log --pretty="format:%s" $track_branch..HEAD)
    good "Submiting '$LOG'..."

    echo "You may supply a message. Hit return once your are done."
    read -e -p "Message: " MESSAGE

    local CMD="$host -p $port gerrit review"
    CMD="$CMD --submit"
    CMD="$CMD --project=$project $CHANGE,$PATCH"
    if [[ -n $MESSAGE ]]; then
        CMD="$CMD --message=\"$MESSAGE\""
    fi

    ssh $CMD

    if ask_yes_no "Reset review branch?" "y"; then
        resetChange
    fi
}

abandonChange() {
    if is_integer $CHANGE; then
        local PATCH=$(patch_count_for_change $CHANGE)
    else
        die "You must be on a review branch"
    fi

    getGerritServerAndProject

    local current="$CURRENT" from_branch="$FROM_BRANCH"
    local remote="$REMOTE" track="$TRACK" track_branch="$REMOTE/$TRACK"

    local LOG=$($GIT log --pretty="format:%s" $track_branch..HEAD)
    good "Abandoning '$LOG'..."

    echo "You may supply a message. Hit return once your are done."
    read -e -p "Message: " MESSAGE

    local CMD="$host -p $port gerrit review"
    CMD="$CMD --abandon"
    CMD="$CMD --project=$project $CHANGE,$PATCH"
    if [[ -n $MESSAGE ]]; then
        CMD="$CMD --message=\"$MESSAGE\""
    fi

    ssh $CMD

    if ask_yes_no "Reset review branch?" "y"; then
        resetChange
    fi
}

# git gerrit push
pushCommit() {
    # ignore the repo state check.
    # abort_on_bad_repo_state

    local remote="$1" refs="$2" change="$CHANGE" current="$CURRENT" track
    local prompt_track=n
    local disable_reset_prompt=y

    # parse remote and refs parameters.
    if [ -z "$remote" ] ; then
        prompt_track=y
        remote="$REMOTE"
        if [ -n "$CHANGE" ] ; then
            refs="refs/changes/$CHANGE"
        else
            refs="refs/for/$TRACK"
        fi
    elif [ -z "$refs" ] ; then
        refs="$1"
        remote="$REMOTE"
    elif [[ $refs != refs/* ]] ; then
        refs="refs/for/$refs"
    fi

    # parse the track and prompt message from refs.
    if [[ $refs == refs/changes/* ]] ; then
        track=$TRACK
        prompt_track=n
    else
        track="$(echo $TRACK | sed -e 's/refs\/[a-z]*\///')"
    fi

    if [ "$prompt_track" = "y" ] ; then
        read -e -p "Please enter a branch to push to [$track] : " choice
        track=${choice:-$track}
        refs="refs/for/$track"
        read -p "Optionally choose a topic [no topic]: " topic
    fi

    if [[ -n "$change" && "$refs" != "refs/changes/$change" ]] ; then
        die "You can only push to refs/changes/$change on review branch."
    fi

    if [[ -n "$change" ]] ; then
        abort_on_bad_repo_state

        # squash commits for submit change patch set.
        #$GIT branch -f "$current.head"
        local msg="$($GIT log --pretty=format:'%s%n%b%n%n' $remote/$track..HEAD)"

        $GIT reset --soft $remote/$track
        $GIT commit -m "$msg"
    else
        # pull --rebase to make sure pushed commit bases on correct parent.
        local msg="Unable to pull and rebase your branch $track to the $remote/$track."
        local msg="${msg}\nPlease resolve the pull issue and try again."
        # git pull --rebase $remote || die "$msg"
    fi

    local log=$($GIT log --pretty="format:%s" $remote/$track..HEAD)
    local changesets=$($GIT rev-list $remote/$track..HEAD | wc -l)
    local changesets=${changesets//[[:space:]]}

    if [[ "$run" = true ]]; then
        if [[ "$changesets" = "0" ]]; then
            die "You have no changes to review. Are you on the right branch?"
        # elif [[ "$changesets" != "1" ]]; then
        #     warn "You have $changesets changes, but you should only push one at a time. Did you forget to squash your commits?"
        #     if ! ask_yes_no "Continue?"; then
        #         die "Existing"
        #     fi
        fi
    fi

    local change_args="$remote HEAD:$refs"

    if [[ -n "$topic" ]]; then
        change_args="$change_args/$topic"
    fi

    git push $change_args ||
        die "Could not push your changes for review. Perhaps you need to update first?"

    git_push_output=$(test -f $GIT_OUTPUT_FILE && cat $GIT_OUTPUT_FILE)

    if [[ "$disable_reset_prompt" != "y" && -z "$change" && "$CURRENT" = "$track" ]] && ask_yes_no "Reset to $remote/$track?" "n"; then
        git reset --hard $remote/$track ||
        die "Could not reset your $track branch to $remote/$track."
    fi

    if [[ -n "$change" ]] ; then
        if  ask_yes_no "Update the review branch $track?" "y"; then
            updateChange ||
                die "Could not update your review branch $track."
        fi
        #$GIT branch -D "$current.head" 2>/dev/null
    fi

    if [[ "$run" = true ]]; then
        url=$(echo "$git_push_output" | grep http | head -n1)

        if [[ -n "$url" ]]; then
            # if [[ -n "$BROWSER" ]]; then
            #     eval "$BROWSER $url"
            # fi
            good $url
        fi

        if [[ "$disable_reset_prompt" != "y" && "$current" = "$track" ]]; then
            good "Successfully pushed '$log' for review and reset $track"
        else
            good "Successfully pushed '$log' for review"
        fi
    fi
}

mergeBranch() {
    git merge --squash "$1"

    if [ ! "$?" = 0 ] ; then
        die "You must type a exist branch or commit"
    fi

    # find the commits.
    if [ -e "${GIT_DIR}/SQUASH_MSG_" ] ; then
        rm "${GIT_DIR}/SQUASH_MSG_"
    fi

    head=$($GIT rev-parse HEAD)
    commits=$(fgrep "commit " "${GIT_DIR}/SQUASH_MSG" | awk '{print $2}')
    for commit in ${commits} ; do
        result=$($GIT cat-file commit $commit | grep "parent ${head}")
        if [ "" != "${result}" ] ; then
            break
        fi
    done

    while read line ; do
        result=$(echo ${line} | grep "commit ${commit}")
        if [ "" != "${result}" ] ; then
            break
        fi

        # ignore the Change-Id: line.
        result=$(echo ${line} | grep "Change-Id:")
        if [ "" != "${result}" ] ; then
            continue
        fi

        echo ${line} >> "${GIT_DIR}/SQUASH_MSG_"
    done < "${GIT_DIR}/SQUASH_MSG"

    mv "${GIT_DIR}/SQUASH_MSG_" "${GIT_DIR}/SQUASH_MSG"

    $GIT commit
}

abort_on_bad_repo_state() {
    if ! no_changes; then
        die "You have local changes. Please do something with them before using $this"
    fi
}

initGerrit() {
    local commit_hook="${GIT_DIR}/hooks/commit-msg"

    if [ -x "${commit_hook}" ] ; then
        echo "gerrit commit-msg hook works well."
        return
    fi

    getGerritServerAndProject
    scp -P $port $host:hooks/commit-msg "${commit_hook}" || die "failed to add gerrit commit-msg hook."
    chmod +x "${commit_hook}"
    echo "gerrit commit-msg hook setup correctly."
}

openChange() {
    local change="$CHANGE" user_change="$1" open_chagne="" ok=""

    if [[ -n "$user_change" ]] ; then
        if is_integer "$user_change" ; then
            open_change="$user_change"
        else
            ok="n"
        fi
    elif is_integer "$change" ; then
        open_chagne="$change"
    else
        ok="n"
    fi

    if [[ "$ok" = "n" ]]; then
        die "Your must specify change number, or at review branch."
    fi

    # get url from gerrit.
    getGerritServerAndProject
    executeGerritCommand "query" "project:${project}" "change:$change"

    url=$(echo "$gerrit_command_result" | grep http | head -n1 | awk '{print $2}')

    if [[ -n "$url" ]]; then
        if [[ -n "$BROWSER" ]]; then
            eval "$BROWSER $url"
        fi
        good $url
    else
        warn "Could not find URL for change $change."
    fi
}

queryChanges() {
    local operators=$@
    if [ "" = "$1" ] ; then
        operators="status:open"
    fi
    getGerritServerAndProject
    executeGerritCommand "query" "--current-patch-set" "--all-approvals" "project:${project}" $operators
    echo "$gerrit_command_result" | less -FRSX
}

queryChangesDetail() {
    getGerritServerAndProject
    executeGerritCommand "query" "--current-patch-set" "--all-approvals" "--patch-sets" "change:'$1'" "project:${project}"
    echo "$gerrit_command_result" | less -FRSX
}

#### usage ####
printShortUsage() {
    cat << EOF
Usage: $this [<options>] init
   or: $this [<options>] open [<change number>]
   or: $this [<options>] merge <branch>
   or: $this [<options>] push [<repository>] [<refspec>]
   or: $this [<options>] changes [<search operators>]
   or: $this [<options>] changes [<change number>]
   or: $this [<options>] apply <change number>
   or: $this [<options>] reset [-f]
   or: $this [<options>] update
   or: $this [<options>] patchset [<git-diff options>] [<commit>]
   or: $this [<options>] diff <patchset1> [<patchset2>]
   or: $this [<options>] review
   or: $this [<options>] submit
   or: $this [<options>] abandon

   Options are: -e (explain) -v (verbose)
                -q (quite)   -h (help)
EOF
}
printUsage() {
    printShortUsage

    cat << EOF

OPTIONS
  -h  --help                  Show this message
  -v  --verbose               Show all commands before running them (default: on)
  -q  --quiet                 Don't display commands before running them (default: off)
  -e  --explain  --dry-run    Don't actually run commands (default: off)

DESCRIPTION
  $this assists in code reviews with gerrit, squashing merge local branch to gerrit branch,
  pushing or pulling changesets to review.

  init
    Init the gerrit hook.

  open
    Open current change or <change number> in browser, if the BROWSER environment
    variable is set. Otherwise the URL will be displayed.

  merge <branch>
    Merge the current gerrit branch with the <branch>, with squashing commit.

  push [<repository>] [<refspec>]
    Pushes a single patch (or - if confirmed - multiple patches) to <repository> <refspec> for review.
    If you are not on a review branch, you need to confirm the <refspec> to push to and
    you may choose a topic.

    If you are not on a review branch, $this will execute 'git pull --rebase' to make sure
    your HEAD is up to date.

    If you are on a review branch , the current patch will be added as a new patchset, following
    the same reset rules as above.

  changes [<change number>]
    Show the detail of specific <change number>.

  changes [<search operators>]
    Show the changes information, <status:open> by default. The <search operators> are
    the same with the operators of Gerrit Code Review - Searching Changes.

    The following are particial <search operators>:
        commit:'SHA1'
        status:open
        status:merged
        status:abandoned

    For more information of <search operators>, please refer to the Gerrit Documentation
    Gerrit Code Review - Searching Changes http://gerrit.googlecode.com/svn/documentation/2.2.1/user-search.html

  apply <change number>
    Applies the latest patch for the <change number> change on "upstream" of the current
    branch, if it's a tracking branch, or master on a branch named for <change number>,
    allowing you to review the change.

  reset [-f]
    Removes the current change branch created by the "start" subcommand and switches
    back to tracking branch.
    Use -f to reset if the current branch has uncommitted changes, otherwise reset will
    refuse to do this.
    If the the current branch does not start with "r" followed by an integer, nothing
    will be done and $this exists with an error.

  update
    Updates the review branch that you are currently on to the latest patch.

  patchset [<git-diff options>] [<commit>]
    Display a diff between the top of previous branch and <commit>. <commit> will
    be HEAD when <commit> is not specified.

  diff [<patch number> [<patch number>]]
    Depending of the number of arguments, displays a diff of
      (0) the last two patchsets.
      (1) the given patchset und the last patchset.
      (2) the given patchsets. You can swap the two numbers to get an inverse diff.
      (3) a specific change specified with <change> <patchset1> <patchset2>. Giving a
          change number means you can use this command without being on a review branch.

  review
    Review the current patch but does not merge it.
    You will be promted for your vote and for a message.

  submit
    Submit the current patch to merge it.

  abandon
    Abandon the current patch.

EOF
}

#### now parse arguments ####

getBranchInfo
get_change_number_from_branch

while true; do
    arg=$1
    shift
    test -z "$arg" && break;

    case $arg in
        -e | --explain | --dry-run)
            echo "$this: using explain-only mode"
            explain=true
            verbose=true
            run=false
            ;;
        -v | --verbose)
            verbose=true
            ;;
        -q | --quiet)
            verbose=false
            ;;
        -h | --help | help)
            printUsage
            exit
            ;;
        merge)
            mergeBranch $1
            exit
            ;;
        push)
            pushCommit $@
            exit
            ;;
        init)
            initGerrit
            exit
            ;;
        open)
            openChange $@
            exit
            ;;
        changes)
            if is_integer $1; then
                queryChangesDetail $1
            else
                queryChanges $@
            fi
            exit
            ;;
        apply)
            if is_integer $1; then
                CHANGE=$1
            else
                if [[ -n $1 ]]; then
                    die "The change number must be an integer."
                fi
            fi
            applyChange
            exit
            ;;
        reset)
            if [[ -n $1 ]] && [[ $1 != "-f" ]]; then
                die "Only -f may be use as an argument for reset"
            fi
            resetChange $1
            exit
            ;;
        patchset)
            showPatchSetDiff $@
            exit
            ;;
        diff)
            diffPatches $1 $2 $3
            exit
            ;;
        rebase)
            if is_integer $1; then
                CHANGE=$1
            else
                if [[ -n $1 ]]; then
                    die "The change number must be an integer."
                fi
            fi
            rebaseChange
            exit
            ;;
        review)
            reviewChange
            exit
            ;;
        update)
            updateChange
            exit
            ;;
        submit)
            submitChange
            exit
            ;;
        abandon)
            abandonChange
            exit
            ;;
        *)
            warn "$this: unrecognized option or subcommand $arg"
            printUsage
            exit 2
            ;;
    esac
done

# no subcommand given
printShortUsage
exit 2
